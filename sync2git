#!/bin/bash

set -e

function cleanup_lock {
  if [ ! -z "${_LOCK_FILE}" ];
  then
    if [ -e "${_LOCK_FILE}" ];
    then
      echo "Deleting stray lockfile..."
      rm -rf "${_LOCK_FILE}"
    fi
  fi
}

trap cleanup_lock EXIT

ETC_PROJECTS=/etc/sync2git/projects
if [ $# -eq 0 ];
then
  PROJECTS=`cd "${ETC_PROJECTS}" ; ls`
else
  PROJECTS="$@"
fi

for PROJECT_NAME in ${PROJECTS}
do

  _LOCK_FILE=

  # Set some defaults (can be overridden by config file)
  ETC_DIR=/etc/sync2git/projects/${PROJECT_NAME}
  VAR_DIR=/var/lib/sync2git
  PROJECT_ROOT=${VAR_DIR}/${PROJECT_NAME}
  CONFIG_FILE=${ETC_DIR}/config
  AUTHORS_FILE=${ETC_DIR}/authors.txt
  SVN_LAYOUT="--stdlayout"

  . "${CONFIG_FILE}" || exit 1

  if [ ! -d "${PROJECT_ROOT}" ];
  then
    mkdir -p "${PROJECT_ROOT}"
  fi

  LOCK_FILE="${PROJECT_ROOT}/.lock"
  if [ -e "${LOCK_FILE}" ];
  then
    echo "lock file ${LOCK_FILE} exists, aborting"
    exit 1
  else
    touch "${LOCK_FILE}"
    # now it is our lock file, we have to clean it up:
    _LOCK_FILE="${LOCK_FILE}"
  fi

  if [ ! -z "$AUTHORS_URL" ];
  then
    AUTHORS_FILE="${PROJECT_ROOT}/authors.txt"
    wget -q -O "${AUTHORS_FILE}" "${AUTHORS_URL}"
  fi
  SVN_CLONE="${PROJECT_ROOT}/svn-clone"
  GIT_BARE=`mktemp -d 2>/dev/null || mktemp -d -t 'sync2git'`

  cd "${PROJECT_ROOT}"

  if [ ! -d "${SVN_CLONE}" ];
  then
    echo "First run, doing a full git-svn clone, this may take a while..."
    git svn clone \
      "${SVN_REPO}" \
      -A "${AUTHORS_FILE}" \
      ${SVN_LAYOUT} \
      "${SVN_CLONE}"
    cd "${SVN_CLONE}"
  else
    echo "git-svn clone already exists, doing a rebase..."
    cd "${SVN_CLONE}"
    git remote rm bare || echo "failed to delete remote:bare, proceeding anyway"
    git svn rebase \
      --fetch-all \
      -A "${AUTHORS_FILE}"
  fi

  git remote add bare "${GIT_BARE}"
  git config remote.bare.push 'refs/remotes/*:refs/heads/*'

  cd "${GIT_BARE}"
  git init --bare .
  git symbolic-ref HEAD refs/heads/trunk

  cd "${SVN_CLONE}"
  git push bare

  cd "${GIT_BARE}"
  git branch -m origin/trunk master
  git for-each-ref --format='%(refname)' refs/heads/origin/tags | \
    cut -d / -f 5 | \
    while read ref;
    do
      git tag "$ref" "refs/heads/origin/tags/$ref"
      git branch -D "origin/tags/$ref"
    done
  git remote add origin "${GIT_REPO}"
  git config branch.master.remote origin
  git config branch.master.merge refs/heads/master
  git push $FORCE --tags origin master
  git push $FORCE --all

  rm -rf "${GIT_BARE}"
  rm -rf "${LOCK_FILE}"

done

